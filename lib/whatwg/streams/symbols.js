'use strict';

({ namespace, PrivateSymbol: PS }) => {
  namespace.kStoredError = PS('kStoredError');
  namespace.kWriter = PS('kWriter');
  namespace.kWritableStreamController = PS('kWritableStreamController');
  namespace.kWriteRequests = PS('kWriteRequests');
  namespace.kInFlightWriteRequest = PS('kInFlightWriteRequest');
  namespace.kCloseRequest = PS('kCloseRequest');
  namespace.kInFlightCloseRequest = PS('kInFlightCloseRequest');
  namespace.kPendingAbortRequest = PS('kPendingAbortRequest');
  namespace.kBackpressure = PS('kBackpressure');
  namespace.kState = PS('kState');
  namespace.kPromise = PS('kPromise');
  namespace.kStarted = PS('kStarted');
  namespace.kReject = PS('kReject');
  namespace.kWasAlreadyErroring = PS('kWasAlreadyErroring');
  namespace.kReason = PS('kReason');
  namespace.kResolve = PS('kResolve');
  namespace.kClosedPromise = PS('kClosedPromise');
  namespace.kOwnerWritableStream = PS('kOwnerWritableStream');
  namespace.kReadyPromise = PS('kReadyPromise');
  namespace.kClosedPromiseState = PS('kClosedPromiseState');
  namespace.kReadyPromiseState = PS('kReadyPromiseState');
  namespace.kControlledWritableStream = PS('kControlledWritableStream');
  namespace.kAbortAlgorithm = PS('kAbortAlgorithm');
  namespace.kQueue = PS('kQueue');
  namespace.kQueueTotalSize = PS('kQueueTotalSize');
  namespace.kStrategySizeAlgorithm = PS('kStrategySizeAlgorithm');
  namespace.kStrategyHWM = PS('kStrategyHWM');
  namespace.kWriteAlgorithm = PS('kWriteAlgorithm');
  namespace.kCloseAlgorithm = PS('kCloseAlgorithm');
  namespace.kClosedPromiseResolve = PS('kClosedPromiseResolve');
  namespace.kClosedPromiseReject = PS('kClosedPromiseReject');
  namespace.kReadyPromiseResolve = PS('kReadyPromiseResolve');
  namespace.kReadyPromiseReject = PS('kReadyPromiseReject');
  namespace.CancelSteps = PS('CancelSteps');
  namespace.PullSteps = PS('PullSteps');
  namespace.kReader = PS('kReader');
  namespace.kDisturbed = PS('kDisturbed');
  namespace.kReadableStreamController = PS('kReadableStreamController');
  namespace.kReadIntoRequests = PS('kReadIntoRequests');
  namespace.kReadRequests = PS('kReadRequests');
  namespace.kOwnerReadableStream = PS('kOwnerReadableStream');
  namespace.kCancelAlgorithm = PS('kCancelAlgorithm');
  namespace.kControlledReadableStream = PS('kControlledReadableStream');
  namespace.kCloseRequested = PS('kCloseRequested');
  namespace.kPulling = PS('kPulling');
  namespace.kPullAgain = PS('kPullAgain');
  namespace.kPullAlgorithm = PS('kPullAlgorithm');
  namespace.kView = PS('kView');
  namespace.kAssociatedReadableByteStreamController = PS('kAssociatedReadableByteStreamController');
  namespace.kByobRequest = PS('kByobRequest');
  namespace.kPendingPullIntos = PS('kPendingPullIntos');
  namespace.kControlledReadableByteStream = PS('kControlledReadableByteStream');
  namespace.kAutoAllocateChunkSize = PS('kAutoAllocateChunkSize');
  namespace.kTransformStreamController = PS('kTransformStreamController');
  namespace.kReadable = PS('kReadable');
  namespace.kWritable = PS('kWritable');
  namespace.kBackpressureChangePromise = PS('kBackpressureChangePromise');
  namespace.kBackpressureChangePromiseResolve = PS('kBackpressureChangePromiseResolve');
  namespace.kControlledTransformStream = PS('kControlledTransformStream');
  namespace.kTransformAlgorithm = PS('kTransformAlgorithm');
  namespace.kFlushAlgorithm = PS('kFlushAlgorithm');
};
